package nl.zeesoft.zcrm.model.impl;

import nl.zeesoft.zcrm.batch.impl.BtcCrmObject;
import nl.zeesoft.zcrm.model.ZCRMModel;
import nl.zeesoft.zodb.database.DbFactory;
import nl.zeesoft.zodb.database.query.QryAdd;
import nl.zeesoft.zodb.database.query.QryObject;
import nl.zeesoft.zodb.database.query.QryRemove;
import nl.zeesoft.zodb.database.query.QryUpdate;
import nl.zeesoft.zodb.model.MdlObject;
import nl.zeesoft.zodb.model.annotations.CacheableCollection;
import nl.zeesoft.zodb.model.annotations.ConstrainObjectAccess;
import nl.zeesoft.zodb.model.annotations.ConstrainObjectUnique;
import nl.zeesoft.zodb.model.annotations.ConstrainPropertyMandatory;
import nl.zeesoft.zodb.model.annotations.DescribeCollection;
import nl.zeesoft.zodb.model.annotations.PersistCollection;
import nl.zeesoft.zodb.model.annotations.PersistProperty;
import nl.zeesoft.zodb.model.annotations.PersistReference;
import nl.zeesoft.zodb.model.datatypes.DtBoolean;
import nl.zeesoft.zodb.model.datatypes.DtDateTime;
import nl.zeesoft.zodb.model.datatypes.DtIdRef;
import nl.zeesoft.zodb.model.datatypes.DtStringBuffer;
import nl.zeesoft.zodb.model.impl.DbUser;

@PersistCollection(entity=false,module=ZCRMModel.MODULE_ZCRM,nameSingle="Invoice batch",nameMulti="Invoice batches")
@CacheableCollection
@ConstrainObjectUnique(properties={"organization;start;finalized"})
@ConstrainObjectAccess(userLevelFetch=ZCRMModel.USER_LEVEL_CRM_CONTRACT_MANAGER,userLevelUpdate=ZCRMModel.USER_LEVEL_CRM_ADMIN,userLevelRemove=ZCRMModel.USER_LEVEL_CRM_ADMIN,userLevelAdd=ZCRMModel.USER_LEVEL_CRM_ADMIN)
@DescribeCollection(
description=
	"Invoice batches contain collections of invoices generated by the invoice batch procedure.\n" +
	"Invoices are generated based on deliveries, organization logs and/or person logs.\n" +
	"Customer contract specific prices are taken into account.\n" +
	"")
public class CrmInvoiceBatch extends CrmInvoiceSummaryObject {
	private DtIdRef 					organization						= new DtIdRef();
	private DtDateTime 					start								= new DtDateTime();
	private DtDateTime 					end									= new DtDateTime();
	private DtBoolean 					finalize							= new DtBoolean();
	private DtDateTime 					finalized							= new DtDateTime();
	private DtStringBuffer				log									= new DtStringBuffer();

	@Override
	public boolean checkObjectConstraintsForUserQuery(DbUser user, QryObject q) {
		boolean ok = super.checkObjectConstraintsForUserQuery(user, q);
		if (ok) {
			ok = checkFinalized(q);
		}
		if (ok) {
			CrmInvoiceBatch changedObject = null;
			if (q instanceof QryAdd) {
				changedObject = (CrmInvoiceBatch) ((QryAdd) q).getDataObject();
			} else if (q instanceof QryUpdate) {
				changedObject = (CrmInvoiceBatch) ((QryUpdate) q).getDataObject();
			}
			if (changedObject!=null) {
				if (!changedObject.getName().getValue().equals(getName().getValue())) {
					if (
						(!(q.getSource() instanceof BtcCrmObject)) &&
						(!(q.getSource() instanceof DbFactory))
						) {
						q.addError("2009",MdlObject.PROPERTY_NAME,"Only an instance of @1 may change these properties",BtcCrmObject.class.getName());
						ok = false;
					}
				}
			}
		}
		return ok;
	}

	@Override
	public boolean checkObjectConstraintsForUserRemoveQuery(DbUser user,QryRemove q) {
		boolean ok = super.checkObjectConstraintsForUserRemoveQuery(user, q);
		if (ok) {
			ok = checkFinalized(q);
		}
		return ok;
	}

	private boolean checkFinalized(QryObject q) {
		boolean ok = true;
		if (getFinalized().getValue()!=null){
			q.addError("2010","finalized","Invoice batch @1 has been finalized",getName().getValue());
			ok = false;
		} else if (getFinalize().getValue()){
			q.addError("2011","finalize","Invoice batch @1 has been checked to be finalized",getName().getValue());
			ok = false;
		}
		return ok;
	}
	
	@ConstrainPropertyMandatory
	@PersistReference(property="organization",label="Organization",className="nl.zeesoft.zcrm.model.impl.CrmDeliveryOrganization",entityLabel="Invoice batches")
	public DtIdRef getOrganization() {
		return organization;
	}

	@ConstrainPropertyMandatory
	@PersistProperty(property="start",label="Start")
	public DtDateTime getStart() {
		return start;
	}

	@ConstrainPropertyMandatory
	@PersistProperty(property="end",label="End")
	public DtDateTime getEnd() {
		return end;
	}

	@PersistProperty(property="finalize",label="Finalize")
	public DtBoolean getFinalize() {
		return finalize;
	}

	@PersistProperty(property="finalized",label="Finalized")
	public DtDateTime getFinalized() {
		return finalized;
	}

	@PersistProperty(property="log",label="Log")
	public DtStringBuffer getLog() {
		return log;
	}
}
