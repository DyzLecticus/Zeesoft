<!DOCTYPE project>
<project name="ZID" default="dist" basedir=".">
	<description>ZID build file</description>

	<!-- Release version -->
	<property name="version" value="1.0.1"/>
	
	<!-- ZDK version -->
	<property name="versionZDK" value="1.0.1"/>
	<property name="releasesZDK" location="../ZDK/releases"/>

	<!-- ZSC version -->
	<property name="versionZSC" value="1.0.1"/>
	<property name="releasesZSC" location="../ZSC/releases"/>

	<!-- ZSPR version -->
	<property name="versionZSPR" value="1.0.1"/>
	<property name="releasesZSPR" location="../ZSPR/releases"/>

	<property name="creator" value="Andre van der Zee, Leiden, The Netherlands"/>
	
	<property name="releases" location="releases"/>
	<property name="src" location="src"/>
	<property name="lib" location="lib"/>
	<property name="build" location="build"/>
	<property name="dist" location="dist"/>

	<target name="copyZDK" description="Copy the ZDK release">
		<mkdir dir="${lib}"/>
		<unzip src="${releasesZDK}/zdk-${versionZDK}.zip" dest="${lib}">
		    <patternset>
		        <include name="**/*.jar"/>
		        <include name="**/*.zip"/>
		    </patternset>
		</unzip>
	</target>

	<target name="copyZSC" description="Copy the ZSC release">
		<mkdir dir="${lib}"/>
		<unzip src="${releasesZSC}/zsc-${versionZSC}.zip" dest="${lib}">
		    <patternset>
		        <include name="**/zsc*.jar"/>
		        <include name="**/zsc*.zip"/>
		    </patternset>
		</unzip>
	</target>
	
	<target name="copyZSPR" description="Copy the ZSPR release">
		<mkdir dir="${lib}"/>
		<unzip src="${releasesZSPR}/zspr-${versionZSPR}.zip" dest="${lib}">
		    <patternset>
		        <include name="**/zspr*.jar"/>
		        <include name="**/zspr*.zip"/>
		    </patternset>
		</unzip>
	</target>
	
	<target name="compile">
		<mkdir dir="${build}"/>
		<path id="libraries">
			<fileset dir="${lib}">
				<include name="**/*.jar" />
			</fileset>
		</path>
		<javac srcdir="${src}" destdir="${build}" classpathref="libraries" debug="on" includeantruntime="false">
		</javac>
	</target>

	<target name="dist" depends="compile" description="Generate the ZID distribution">
		<!-- Copy sources to build directory -->
		<copy todir="${build}">
            <fileset dir="${src}" />
        </copy>		
		<copy file="build.xml" tofile="${build}/build.xml"/>
		<!-- Create distribution directory -->
		<mkdir dir="${dist}"/>
		<!-- Copy dependencies -->
		<copy file="${lib}/zdk.jar" tofile="${dist}/zdk.jar"/>
		<copy file="${lib}/zsc.jar" tofile="${dist}/zsc.jar"/>
		<copy file="${lib}/zspr.jar" tofile="${dist}/zspr.jar"/>
		<!-- Generate manifest -->
		<manifest file="${dist}/mymanifest">
			<attribute name="Built-By" value="${version} ${creator}"/>
			<attribute name="Class-path" value="nl/zeesoft/zid nl/zeesoft/zid/dialog nl/zeesoft/zid/dialog/io nl/zeesoft/zid/session nl/zeesoft/zid/test zdk.jar zsc.jar zspr.jar"/>  
			<attribute name="Main-Class" value="nl.zeesoft.zid.test.ZID"/>
		</manifest>		
		<!-- Build jar file -->
		<jar jarfile="${dist}/zid.jar" basedir="${build}" manifest="dist/mymanifest"/>
		<!-- Run tests and generate README.md -->
		<exec dir="${dist}" executable="cmd" output="${dist}/README.md" resultproperty="_error" logError="true"> 
			<arg line="/c java -jar zid.jar ${version}"/>
		</exec>
		<condition property="_abort">
			<equals arg1="${_error}" arg2="1"/>
		</condition>
		<fail if="_abort" message="One or more tests failed"/>		
		<!-- Rebuild jar file (include README.md) -->
		<copy file="${dist}/README.md" tofile="${build}/README.md"/>
		<jar jarfile="${dist}/zid.jar" basedir="${build}" manifest="dist/mymanifest"/>
		<!-- Remove sources from build directory -->
		<delete>
            <fileset dir="${build}" includes="**/*.java"/>
		</delete>
	</target>

	<target name="release" description="Release the ZID">
		<antcall target="failIfReleaseExists"/>
		<input message="Are you sure you want to release version ${version} (y/n)?" validargs="y,n" addproperty="_release"/>
		<condition property="_abort">
			<equals arg1="n" arg2="${_release}"/>
		</condition>
		<fail if="_abort" message="Aborted release"/>		
		<antcall target="releaseConfirmed"/>
	</target>

	<target name="releaseConfirmed">
		<antcall target="failIfReleaseExists"/>
		<antcall target="clean"/>
		<antcall target="dist"/>
		<antcall target="javadoc"/>
		<mkdir dir="${releases}"/>
		<mkdir dir="${releases}/${version}"/>
		<copy file="${dist}/zdk.jar" tofile="${releases}/${version}/zdk.jar"/>
		<copy file="${lib}/zdk-javadoc.zip" tofile="${releases}/${version}/zdk-javadoc.zip"/>
		<copy file="${dist}/zsc.jar" tofile="${releases}/${version}/zsc.jar"/>
		<copy file="${lib}/zsc-javadoc.zip" tofile="${releases}/${version}/zsc-javadoc.zip"/>
		<copy file="${dist}/zspr.jar" tofile="${releases}/${version}/zspr.jar"/>
		<copy file="${lib}/zspr-javadoc.zip" tofile="${releases}/${version}/zspr-javadoc.zip"/>
		<copy file="${dist}/zid.jar" tofile="${releases}/${version}/zid.jar"/>
		<copy file="${dist}/zid-javadoc.zip" tofile="${releases}/${version}/zid-javadoc.zip"/>
		<copy file="${dist}/README.md" tofile="${releases}/${version}/README.md"/>
		<zip destfile="${releases}/zid-${version}.zip" basedir="${releases}/${version}"/>
		<delete dir="${releases}/${version}"/>
		<copy file="${dist}/README.md" tofile="README.md"/>
	</target>
	
	<target name="javadoc" description="Generate the ZID documentation">
		<mkdir dir="${dist}"/>
		<mkdir dir="${dist}/src"/>
		<unzip src="${lib}/zdk.jar" dest="${dist}/src">
		    <patternset>
		        <include name="**/*.java"/>
		    </patternset>
		</unzip>
		<unzip src="${lib}/zsc.jar" dest="${dist}/src">
		    <patternset>
		        <include name="**/*.java"/>
		    </patternset>
		</unzip>
		<unzip src="${lib}/zspr.jar" dest="${dist}/src">
		    <patternset>
		        <include name="**/*.java"/>
		    </patternset>
		</unzip>
		<copy todir="${dist}/src">
            <fileset dir="${src}" />
        </copy>		
		<mkdir dir="${dist}/javadoc"/>
		<javadoc sourcepath="${dist}/src" destdir="${dist}/javadoc" failonerror="true" failonwarning="true" packagenames="nl.zeesoft.zid,nl.zeesoft.zid.dialog,nl.zeesoft.zid.dialog.io,nl.zeesoft.zid.session"/>
		<zip destfile="${dist}/zid-javadoc.zip" basedir="${dist}/javadoc"/>
		<delete dir="${dist}/javadoc"/>
		<delete dir="${dist}/src"/>
	</target>

	<target name="clean" description="Clean up">
		<delete dir="${build}"/>
		<delete dir="${dist}"/>
	</target>

	<target name="failIfReleaseExists">
		<condition property="_released">
			<available file="${releases}/zid-${version}.zip"/>
		</condition>
		<fail if="_released" message="Version ${version} has already been released"/>		
	</target>
</project>
