package nl.zeesoft.zdbd.api.javascript;

import nl.zeesoft.zdbd.api.ResponseObject;
import nl.zeesoft.zdbd.pattern.Rythm;
import nl.zeesoft.zdk.Str;

public class SequencerJs extends ResponseObject {
	@Override
	public Str render() {
		Str r = new Str();
		append(r,"var sequencer = sequencer || {};");
		append(r,"sequencer.isRunning = false;");
		append(r,"sequencer.isRecording = false;");
		append(r,"sequencer.recordedTicks = 0;");
		append(r,"sequencer.refresh = function() {");
		append(r,"    main.xhr.getText(\"/sequencerControl.txt\",sequencer.refreshCallback,sequencer.errorCallback);");
		append(r,"    if (!sequencer.isRunning) {");
		append(r,"        sequencer.refreshState();");
		append(r,"    };");
		append(r,"};");
		append(r,"sequencer.refreshCallback = function(response) {");
		append(r,"    var elem = window.document.getElementById(\"sequencer\");");
		append(r,"    if (elem!=null) {");
		append(r,"        elem.innerHTML = response.responseText;");
		append(r,"    }");
		append(r,"};");
		append(r,"sequencer.errorCallback = function(response) {");
		append(r,"    if (response.status==503) {");
		append(r,"        setTimeout(function() { sequencer.refresh(); }, 500);");
		append(r,"    }");
		append(r,"};");
		append(r,"sequencer.refreshState = function() {");
		append(r,"    main.xhr.getText(\"/sequencer.txt\",sequencer.refreshStateCallback,sequencer.errorStateCallback);");
		append(r,"};");
		append(r,"sequencer.refreshStateCallback = function(response) {");
		append(r,"    var obj = main.xhr.parseResponseText(response.responseText);");
		append(r,"    var elem = window.document.getElementById(\"currentSequence\");");
		append(r,"    if (elem!=null && elem.options[elem.selectedIndex] &&");
		append(r,"        elem.options[elem.selectedIndex].value!=obj.currentSequence) {");
		append(r,"        elem.value = obj.currentSequence;");
		append(r,"    }");
		append(r,"    var elem = window.document.getElementById(\"nextSequence\");");
		append(r,"    if (elem!=null && elem.options[elem.selectedIndex] &&");
		append(r,"        elem.options[elem.selectedIndex].value!=obj.nextSequence) {");
		append(r,"        elem.value = obj.nextSequence;");
		append(r,"    }");
		append(r,"    if (obj.isRunning) {");
		append(r,"        sequencer.isRunning = true;");
		append(r,"        setTimeout(function() { sequencer.refreshState(); }, 200);");
		append(r,"    } else if (!obj.isRunning) {");
		append(r,"        sequencer.isRunning = false;");
		append(r,"    }");
		append(r,"    for (name in obj) {");
		append(r,"        if (name.indexOf(\"mute-\")==0) {");
		append(r,"            var elem = window.document.getElementById(name);");
		append(r,"            if (elem!=null) {");
		append(r,"                if (obj[name] && !elem.classList.contains(\"red\")) {");
		append(r,"                    elem.classList.add(\"red\");");
		append(r,"                } else if (!obj[name] && elem.classList.contains(\"red\")) {");
		append(r,"                    elem.classList.remove(\"red\");");
		append(r,"                }");
		append(r,"            }");
		append(r,"        }");
		append(r,"    }");
		append(r,"    sequencer.isRecording = obj.isRecording;");
		append(r,"    sequencer.recordedTicks = parseInt(obj.recordedTicks,10);");
		append(r,"    var elem = window.document.getElementById(\"recordedTicks\");");
		append(r,"    if (elem!=null) {");
		append(r,"        elem.innerHTML = obj.recordedTicks;");
		append(r,"    }");
		append(r,"    var elem = window.document.getElementById(\"exportMidi\");");
		append(r,"    if (elem!=null) {");
		append(r,"        elem.disabled = (obj.recordedTicks==0);");
		append(r,"    }");
		append(r,"    var elem = window.document.getElementById(\"exportAudio\");");
		append(r,"    if (elem!=null) {");
		append(r,"        elem.disabled = (obj.recordedTicks==0);");
		append(r,"    }");
		append(r,"};");
		append(r,"sequencer.errorStateCallback = function(response) {");
		append(r,"    if (response.status==503) {");
		append(r,"        setTimeout(function() { sequencer.refreshState(); }, 500);");
		append(r,"    }");
		append(r,"};");
		append(r,"sequencer.clear = function() {");
		append(r,"    var elem = window.document.getElementById(\"sequencer\");");
		append(r,"    if (elem!=null) {");
		append(r,"        elem.innerHTML = \"\";");
		append(r,"    }");
		append(r,"};");
		append(r,"sequencer.propertyChange = function(property) {");
		append(r,"    var value = main.dom.getElementValue(property.id);");
		append(r,"    var cb = null;");
		append(r,"    if (property.id==\"beatsPerMinute\") {");
		append(r,"        if (value>240) {");
		append(r,"            value = 240;");
		append(r,"        } else if (value<10) {");
		append(r,"            value = 10;");
		append(r,"        }");
		append(r,"        cb = function() { theme.refresh(); };");
		append(r,"    } else if (property.id==\"shufflePercentage\") {");
		append(r,"        if (value>" + Rythm.MAX_SHUFFLE + ") {");
		append(r,"            value = " + Rythm.MAX_SHUFFLE + ";");
		append(r,"            property.value = value;");
		append(r,"        } else if (value<0.0) {");
		append(r,"            value = 0.0;");
		append(r,"            property.value = value;");
		append(r,"        }");
		append(r,"    } else if (property.id.indexOf(\"Sequence\")>0) {");
		append(r,"        cb = function() { sequencer.refresh(); };");
		append(r,"    } else if (property.type==\"checkbox\") {");
		append(r,"        cb = function() { sequencer.refresh(); };");
		append(r,"    }");
		append(r,"    var body = \"SET_PROPERTY:\";");
		append(r,"    body += property.id;");
		append(r,"    body += \":\";");
		append(r,"    body += main.dom.getElementValue(property.id);");
		append(r,"    main.xhr.postText(\"/sequencer.txt\",body,cb);");
		append(r,"}");
		append(r,"sequencer.toggleMute = function(button) {");
		append(r,"    var mute = true;");
		append(r,"    if (button.classList.contains(\"red\")) {");
		append(r,"        mute = false;");
		append(r,"        button.classList.remove(\"red\");");
		append(r,"    } else {");
		append(r,"        button.classList.add(\"red\");");
		append(r,"    }");
		append(r,"    var body = \"TOGGLE_MUTE:\" + button.id + \":\" + mute;");
		append(r,"    main.xhr.postText(\"/sequencer.txt\",body,sequencer.refresh,main.xhr.alertErrorCallback);");
		append(r,"}");
		append(r,"sequencer.startSequence = function() {");
		append(r,"    main.xhr.postText(\"/sequencer.txt\",\"START_SEQUENCE\",sequencer.refresh,main.xhr.alertErrorCallback);");
		append(r,"}");
		append(r,"sequencer.startTheme = function() {");
		append(r,"    main.xhr.postText(\"/sequencer.txt\",\"START\",sequencer.refresh,main.xhr.alertErrorCallback);");
		append(r,"}");
		append(r,"sequencer.stop = function() {");
		append(r,"    main.xhr.postText(\"/sequencer.txt\",\"STOP\",sequencer.refresh,main.xhr.alertErrorCallback);");
		append(r,"}");
		append(r,"sequencer.startRecording = function() {");
		append(r,"    var s = true;");
		append(r,"    if (sequencer.recordedTicks>0) {");
		append(r,"        s = confirm(\"This will erase the current recording. Are you sure you want to restart?\");");
		append(r,"    }");
		append(r,"    if (s==true) {");
		append(r,"        main.xhr.postText(\"/sequencer.txt\",\"START_RECORDING\",sequencer.refresh,main.xhr.alertErrorCallback);");
		append(r,"    }");
		append(r,"}");
		append(r,"sequencer.stopRecording = function() {");
		append(r,"    var s = true;");
		append(r,"    if (sequencer.isRunning) {");
		append(r,"        s = confirm(\"Are you sure you want to stop recording?\");");
		append(r,"    }");
		append(r,"    if (s==true) {");
		append(r,"        main.xhr.postText(\"/sequencer.txt\",\"STOP_RECORDING\",sequencer.refresh,main.xhr.alertErrorCallback);");
		append(r,"    }");
		append(r,"}");
		append(r,"sequencer.exportMidi = function() {");
		append(r,"    main.xhr.postText(\"/sequencer.txt\",\"EXPORT_MIDI\",state.refresh,main.xhr.alertErrorCallback);");
		append(r,"}");
		append(r,"sequencer.exportAudio = function() {");
		append(r,"    main.xhr.postText(\"/sequencer.txt\",\"EXPORT_AUDIO\",state.refresh,main.xhr.alertErrorCallback);");
		append(r,"}");
		return r;
	}
}
